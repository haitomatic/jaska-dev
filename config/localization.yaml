/**
  ros__parameters:
    basic:
      map_frame: "map"                        # publish map frame
      map_match_hz: 2.0                       # map matching Hz
      saved_map: "home/haito/haito_dev/ros2_ws/src/jaska-dev/map"  # path to save map
      visualize_voxel_size: 0.3               # voxel size for visualization

    keyframe:
      keyframe_threshold: 0.1                 # distance threshold (m) to generate new keyframe
      num_submap_keyframes: 20                # how many subkeyframes are merged to ICP with current keyframe (closest-this ~ closest+this, if exists)

    match:
      match_detection_radius: 500.0           # search radius (m) for map matching
      quatro_nano_gicp_voxel_resolution: 0.1  # voxel resolution to use Quatro and Nano-GICP matching

    nano_gicp:                                # all values are from Nano-GICP official github (Direct LiDAR Odometry)
      thread_number: 0                        # if 0, max number of core
      icp_score_threshold: 0.005              # lower is more accurate, for map matching
      correspondences_number: 15
      max_correspondence_distance: 35.0       # this is also used for candidate trimming after ScanContext
      max_iter: 50
      transformation_epsilon: 0.01
      euclidean_fitness_epsilon: 0.01
      ransac:
        max_iter: 10
        outlier_rejection_threshold: 0.5

    quatro:                                   # all values are from Quatro official github
      enable: false                           # whether or not to use quatro, if false -> FAST-LIO-SAM-N (Nano-GICP only)
      optimize_matching: true                 # whether or not to use Optimized matching
      distance_threshold: 30.0                # when optimized matching, use only correspondences within this radius, unit [meter]
      max_correspondences: 350                # max correspondences to use for optimized matching
      fpfh_normal_radius: 0.6                 # It should be 2.5 - 3.0 * `quatro_nano_gicp_voxel_resolution`
      fpfh_radius: 0.9                        # It should be 5.0 * `quatro_nano_gicp_voxel_resolution`
      estimating_scale: false
      noise_bound: 0.3                        # The magnitude of uncertainty of measurements, the best is within v/2 ~ v (v: voxel resol.)
      rotation:
        num_max_iter: 50                      # Usually, rotation estimation converges within < 20  iterations
        gnc_factor: 1.4                       # Control the magnitue of the increase in non-linearity. The larger the value, the steeper the increase in nonlinearity.
        rot_cost_diff_threshold: 0.00005      # The cost threshold is compared with the difference between costs of consecutive iterations.
                                              # Once the diff. of cost < `rot_cost_diff_threshold`, then the optimization is finished.
