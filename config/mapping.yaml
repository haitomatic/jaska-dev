sam-qn_node:
  ros__parameters:
    basic:
      map_frame: "map"                        # publish map frame
      loop_update_hz: 1.0                     # loop detection Hz
      vis_hz: 0.5                             # visualization Hz

    keyframe:
      keyframe_threshold: 0.1                 # distance threshold (m) to generate new keyframe
      num_submap_keyframes: 20                # how many subkeyframes are merged to ICP with current keyframe (closest-this ~ closest+this, if exists)
      enable_submap_matching: false           # If it is set to be `true`, submap-level (coarse-to-)fine alignment will be performed
                                              # note: without Quatro, anyway scan-to-submap matching is performed, as that shows better performance

    loop:
      loop_detection_radius: 30.0             # search radius (m) for loop detection
      loop_detection_timediff_threshold: 20.0 # time difference threshold (s) for loop detection

    quatro_nano_gicp_voxel_resolution: 0.1    # voxel resolution to use Quatro and Nano-GICP matching
    save_voxel_resolution: 0.1                #  voxel resolution to save map in .pcd format

    nano_gicp:                                # all values are from Nano-GICP official github (Direct LiDAR Odometry)
      thread_number: 0                        # if 0, max number of core
      icp_score_threshold: 0.05               # lower is more accurate, for loop detection
      correspondences_number: 15
      max_iter: 50
      transformation_epsilon: 0.005
      euclidean_fitness_epsilon: 0.005
      ransac:
        max_iter: 10
        outlier_rejection_threshold: 0.5

    quatro:                                   # all values are from Quatro official github
      enable: false                           # whether or not to use quatro, if false -> FAST-LIO-SAM-N (Nano-GICP only)
      optimize_matching: true                 # whether or not to use Optimized matching
      distance_threshold: 50.0                # when optimized matching, use only correspondences within this radius, unit [meter]
      max_correspondences: 300                # max correspondences to use for optimized matching
      fpfh_normal_radius: 0.3                 # It should be 2.5 - 3.0 * `quatro_nano_gicp_voxel_resolution`
      fpfh_radius: 0.45                       # It should be 5.0 * `quatro_nano_gicp_voxel_resolution`
      estimating_scale: false
      noise_bound: 0.3                        # The magnitude of uncertainty of measurements, the best is within v/2 ~ v (v: voxel resol.)
      rotation:
        num_max_iter: 50                      # Usually, rotation estimation converges within < 20 iterations
        gnc_factor: 1.4                       # Control the magnitue of the increase in non-linearity. The larger the value, the steeper the increase in nonlinearity.
        rot_cost_diff_threshold: 0.00005      # The cost threshold is compared with the difference between costs of consecutive iterations.
                                              # Once the diff. of cost < `rot_cost_diff_threshold`, then the optimization is finished.

    result:
      save_map_pcd: true                      # Save result map in .pcd format, not voxelized and hence file size could be huge
      save_map_bag: true                      # Save result map in .bag format, NOTE: this is used for FAST-LIO-Localization-QN (https://github.com/engcang/FAST-LIO-Localization-QN)
      save_in_kitti_format: false             # Save result in KITTI format
      seq_name: "sequence"                    # sequence name for saving scans and corresponding poses

